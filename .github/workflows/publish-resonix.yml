name: Publish resonix.js Package

on:
  workflow_dispatch:
    inputs:
      force:
        description: "Publish even if version already exists on npm"
        required: false
        default: "false"
  push:
    paths:
      - "packages/resonix/**"
      - ".github/workflows/publish-resonix.yml"

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build resonix.js package
        run: |
          cd packages/resonix
          if jq -e '.scripts.build' package.json > /dev/null; then
            pnpm build
          else
            echo "No build script defined, skipping."
          fi

      - name: Read version
        id: pkg
        run: |
          VERSION=$(jq -r .version packages/resonix/package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if version exists on npm
        id: npm
        env:
          PKG: resonix.js
        run: |
          set +e
            EXISTING=$(npm view "${PKG}@${{ steps.pkg.outputs.version }}" version 2>/dev/null)
            if [ -n "$EXISTING" ]; then
              echo "exists=true" >> $GITHUB_OUTPUT
            else
              echo "exists=false" >> $GITHUB_OUTPUT
            fi
          set -e
          echo "NPM existing version check: $EXISTING"

      - name: Stop if already published
        if: steps.npm.outputs.exists == 'true' && inputs.force != 'true'
        run: echo "Version ${{ steps.pkg.outputs.version }} already on npm. Skipping publish & release."

      - name: Publish resonix.js
        if: steps.npm.outputs.exists == 'false' || inputs.force == 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing resonix.js@${{ steps.pkg.outputs.version }}"
          cd packages/resonix
          npm publish --access public --provenance

      - name: Create GitHub release
        if: steps.npm.outputs.exists == 'false' || inputs.force == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          set -e
          name="resonix.js"
          version="${{ steps.pkg.outputs.version }}"
          tag="${name}-v${version}"
          relname="${name} v${version}"
          # Check if release already exists (in case of force publish)
          code=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${tag}")
          if [ "$code" = "200" ]; then
            echo "Release already exists for $relname. Skipping creation."
            exit 0
          fi
          echo "Creating release $relname (tag: $tag)"
          payload=$(jq -n \
            --arg tag "$tag" \
            --arg relname "$relname" \
            --arg name "$name" \
            --arg version "$version" \
            '{
              tag_name: $tag,
              target_commitish: "master",
              name: $relname,
              body: ("Automated release for " + $name + " version " + $version + "."),
              draft: false,
              prerelease: false,
              generate_release_notes: true
            }')
          curl -s -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases" \
            -d "$payload"
